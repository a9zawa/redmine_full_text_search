#!/usr/bin/env ruby

require "fileutils"
require "optparse"

config_dir = File.expand_path("../../../../config",  __FILE__)
APP_PATH = File.join(config_dir, "application")
require APP_PATH
Rails.application.require_environment!

plugin = Redmine::Plugin.find(:full_text_search)

output_directory = "."

parser = OptionParser.new
parser.version = plugin.version
parser.on("--output-directory=DIRECTORY",
          "Output to the DIRECTORY",
          "[#{output_directory}]") do |directory|
  output_directory = directory
end
parser.parse!(ARGV)

def format_user(user)
  return nil if user.nil?
  if user.is_a?(User)
    id = user.id
    name = user.name
  else
    id = Integer(user, 10)
    name = nil
  end
  {
    "type" => "user",
    "id" => id,
    "name" => name,
  }
end

def format_status(status)
  return nil if status.nil?
  if status.is_a?(IssueStatus)
    id = status.id
    is_closed = status.is_closed?
    name = status.name
  else
    id = Integer(status, 10)
    is_closed = nil
    name = nil
  end
  {
    "type" => "status",
    "id" => id,
    "is_closed" => is_closed,
    "name" => name,
  }
end

def format_priority(priority)
  return nil if priority.nil?
  if priority.is_a?(IssuePriority)
    id = priority.id
    number = priority.position
    name = priority.name
  else
    id = Integer(priority, 10)
    number = nil
    name = nil
  end
  {
    "type" => "priority",
    "id" => id,
    "number" => number,
    "name" => name,
  }
end

def format_version(version)
  return nil if version.nil?
  if version.is_a?(Version)
    id = version.id
    name = version.name
  else
    id = Integer(version, 10)
    name = nil
  end
  {
    "type" => "version",
    "id" => id,
    "name" => name,
  }
end

def format_assigned_to(user)
  format_user(user)
end

def format_fixed_version(version)
  format_version(version)
end

def format_type(type, value)
  if respond_to?("format_#{type}", true)
    __send__("format_#{type}", value)
  else
    value
  end
end

def format_custom_field(custom_field)
  return nil if custom_field.nil?
  {
    "id" => custom_field.id,
    "name" => custom_field.name,
  }
end

def format_details(details)
  details.collect do |detail|
    case detail.property
    when "attachment", "relation"
      {
        "type" => detail.property,
        "old" => detail.old_value,
        "new" => detail.value,
      }
    when "attr"
      case detail.prop_key
      when /\A(.+)_id\z/
        type = $1
        issue = detail.journal.journalized
        association = issue.class.reflect_on_association(type)
        type_class = association.klass
        old_value = nil
        new_value = nil
        if detail.old_value
          old_value = type_class.find_by_id(detail.old_value) || detail.old_value
        end
        if detail.value
          new_value = type_class.find_by_id(detail.value) || detail.value
        end
        {
          "type" => type,
          "old" => format_type(type, old_value),
          "new" => format_type(type, new_value),
        }
      else
        {
          "type" => detail.prop_key,
          "old" => detail.old_value,
          "new" => detail.value,
        }
      end
    when "cf"
      {
        "type" => "custom_field",
        "custom_field" => format_custom_field(detail.custom_field),
        "old" => detail.old_value,
        "new" => detail.value,
      }
    else
      raise "unknown detail: #{detail.inspect}"
    end
  end
end

FileUtils.mkdir_p(output_directory)
Project.find_each do |project|
  issues = []
  project.issues.find_each do |issue|
    issue_data = {
      "id" => issue.id,
      "subject" => issue.subject,
      "description" => issue.description,
      "author" => format_user(issue.author),
      "assignee" => format_user(issue.assigned_to),
      "status" => format_status(issue.status),
      "priority" => format_priority(issue.priority),
      "created_at" => issue.created_on.iso8601,
      "updated_at" => issue.updated_on.iso8601,
      "estimated_hours" => issue.estimated_hours,
      "elapsed_hours" => issue.time_entries.sum(:hours),
    }
    history = []
    issue.journals.find_each do |journal|
      history << {
        "created_at" => journal.created_on.iso8601,
        "user" => format_user(journal.user),
        "comment" => journal.notes,
        "changes" => format_details(journal.details),
      }
    end
    issue_data["history"] = history
    issues << issue_data
  end
  output_path = File.join(output_directory,
                          "issue-histories-#{project.identifier}.json")
  File.open(output_path, "w") do |output|
    output.puts(JSON.pretty_generate(issues))
  end
end
