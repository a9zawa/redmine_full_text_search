#!/usr/bin/env ruby

require "optparse"
require "strscan"

config_dir = File.expand_path("../../../../config",  __FILE__)
APP_PATH = File.join(config_dir, "application")
require APP_PATH
Rails.application.require_environment!

plugin = Redmine::Plugin.find(:full_text_search)

dump_attachment = true
dump_change = true
dump_changeset = true
target_extensions = [
  ".doc",
  ".docx",
  ".pdf",
  ".txt",
]

parser = OptionParser.new
parser.version = plugin.version
parser.banner += " [TARGET_PROJECT]"
parser.on("--no-attachment",
          "Ignore attachment data") do |boolean|
  dump_attachment = boolean
end
parser.on("--no-change",
          "Ignore change data") do |boolean|
  dump_change = boolean
end
parser.on("--no-changeset",
          "Ignore changeset data") do |boolean|
  dump_changeset = boolean
end
parser.on("--target-extensions=EXTENSION1,EXTENSION2,...",
          Array,
          "Attachment extensions do be dumped",
          "(#{target_extensions.join(",")})") do |extensions|
  target_extensions = extensions
end
target_project, = parser.parse!(ARGV)

if target_project
  project = Project.find_by_identifier!(target_project)
else
  project = nil
end

attachment_id = FullTextSearch::Type.attachment.id
change_id = FullTextSearch::Type.change.id
changeset_id = FullTextSearch::Type.changeset.id

extension_conditions = target_extensions.collect do |extension|
  "title @ #{extension.to_json}"
end
extension_condition = extension_conditions.join(" || ")

base_conditions = []
not_conditions = []
or_conditions = []
if project
  base_conditions << "project_id == #{project.id}"
end
if dump_attachment
  or_conditions <<
    "source_type_id == #{attachment_id} && (#{extension_condition})"
else
  not_conditions << "source_type_id == #{attachment_id}"
end
if dump_change
  or_conditions <<
    "source_type_id == #{attachment_id} && (#{extension_condition})"
else
  not_conditions << "source_type_id == #{change_id}"
end
unless dump_changeset
  not_conditions << "source_type_id == #{changeset_id}"
end
if base_conditions.empty?
  base_conditions << "all_records()"
end
conditions = [
  ["(#{base_conditions.join(" && ")})", *not_conditions].join(" &! "),
]
or_conditions.each do |or_condition|
  conditions <<
    ["(#{base_conditions.join(" && ")})", "(#{or_condition})"].join(" && ")
end
conditions = conditions.collect do |condition|
  "(#{condition})"
end
filter = conditions.join(" || ")

MAX_LINE_SIZE = 2048

def emit_sentence(sentence)
  sentence = sentence.gsub(/\r?\n/, " ").strip
  return if sentence.empty?
  return unless sentence.end_with?("。")
  return if sentence.bytesize > MAX_LINE_SIZE
  yield(sentence)
end

def paragraph_to_sentences(paragraph, &block)
  paragraph = paragraph.gsub(/^\s+|\s+$/, "")
  return if paragraph.empty?
  scanner = StringScanner.new(paragraph)
  sentence = ""
  until scanner.eos?
    data = scanner.scan(/[^。.]+/)
    sentence << data if data
    if scanner.scan(/\./)
      sentence << "."
      case sentence
      when /\d\.\z/, # 1.
           /\(\d\)\.\z/, # (1).
           /\bMr\.\z/, # Mr.
           /\.\.\z/, # ..
           / \.\z/ # " ."
        # Do nothing
      else
        if scanner.match?(/[a-zA-Z]/) # tar.gz
          next
        elsif scanner.match?(/\./) # ..
          next
        else
          # p [:emit_period, sentence]
          emit_sentence(sentence, &block)
          sentence = ""
        end
      end
    elsif scanner.scan(/。/)
      sentence << "。"
      # p [:emit_japanese_period, sentence]
      emit_sentence(sentence, &block)
      sentence = ""
    else
      # p [:emit_no_period, sentence]
      emit_sentence(sentence, &block)
      sentence = ""
    end
  end
  # p [:emit_last, sentence]
  emit_sentence(sentence, &block)
end

def text_to_sentences(text, &block)
  buffer = ""
  indent = ""
  text.each_line do |line|
    if line.strip.empty?
      paragraph_to_sentences(buffer, &block)
      buffer = ""
      indent = ""
    else
      current_indent = line[/\A(\s+)/, 1]
      if indent == current_indent
        case line
        when /\A\s*\p{Number}/ # 1, １, ①
          # p [:paragraph_number, line]
          paragraph_to_sentences(buffer, &block)
          buffer = ""
        when /\A\s*\p{Open_Punctuation}\p{Number}/ # (1, （１
          # p [:paragraph_open_punctuation_number, line]
          paragraph_to_sentences(buffer, &block)
          buffer = ""
        end
      else
        paragraph_to_sentences(buffer, &block)
        buffer = ""
      end
      buffer << line
      indent = current_indent
    end
  end
  paragraph_to_sentences(buffer, &block)
end

offset = 0
limit = 1000
i = 0
loop do
  arguments = {
    "output_columns" => "title,content,source_type_id",
    "filter" => filter,
    "offset" => offset.to_s,
    "limit" => limit.to_s,
  }
  command = Groonga::Command::Select.new("select", arguments)
  response = FullTextSearch::Target.select(command)
  records = response.records
  records.each do |record|
    # pp record
    sentences = []
    source_type_id = record["source_type_id"]
    case source_type_id
    when attachment_id, source_type_id
    else
      text_to_sentences(record["title"]) do |sentence|
        sentences << sentence
      end
    end
    text_to_sentences(record["content"]) do |sentence|
      sentences << sentence
    end
    next if sentences.empty?
    puts if i > 0
    puts(sentences)
    # pp([source_type_id, sentences])
    i += 1
  end
  offset += records.size
  break if response.n_hits == offset
end
